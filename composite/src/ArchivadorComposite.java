/**
 * Patr칩n Composite para un sistema de archivador simple
 * Permite tratar archivos individuales y carpetas de forma uniforme
 */

import java.util.ArrayList;  // Importa la clase ArrayList para manejar listas de objetos
import java.util.List;       // Importa la interfaz List para usar listas gen칠ricas

/**
 * Component: Interfaz com칰n para todos los elementos (archivos y carpetas)
 */
interface ArchivoComponent {
    String getNombre();                    // M칠todo para obtener el nombre del archivo o carpeta
    int getTama침o();                       // M칠todo para obtener el tama침o (de forma recursiva si es carpeta)
    void mostrar(String indentacion);      // M칠todo para mostrar la estructura con indentaci칩n visual
}

/**
 * Leaf: Representa un archivo individual (no tiene hijos)
 */
class Archivo implements ArchivoComponent {
    private String nombre;  // Nombre del archivo
    private int tama침o;     // Tama침o en bytes

    // Constructor para inicializar el archivo con su nombre y tama침o
    public Archivo(String nombre, int tama침o) {
        this.nombre = nombre;
        this.tama침o = tama침o;
    }
    /**
     * @Override indica que este m칠todo est치 implementando
     */
    @Override
    public String getNombre() {
        return nombre;  // Retorna el nombre del archivo
    }

    @Override
    public int getTama침o() {
        return tama침o;  // Retorna el tama침o del archivo
    }

    @Override
    public void mostrar(String indentacion) { //  //(String indentacion)	Este m칠todo recibe un par치metro llamado indentacion, que es un texto (String).
        // Muestra el archivo con su nombre y tama침o, usando indentaci칩n para jerarqu칤a
        System.out.println(indentacion + "游늯 Archivo: " + nombre + " (" + tama침o + " bytes)");
    }
}

/**
 * Composite: Representa una carpeta que puede contener archivos y otras carpetas
 */
class Carpeta implements ArchivoComponent {
    private String nombre;                               // Nombre de la carpeta
    private List<ArchivoComponent> hijos;                // Lista de archivos o carpetas que contiene

    // Constructor para inicializar la carpeta con su nombre
    public Carpeta(String nombre) {
        this.nombre = nombre;
        this.hijos = new ArrayList<>();                  // Crea una lista vac칤a para los hijos
    }

    @Override
    public String getNombre() {
        return nombre;                                   // Retorna el nombre de la carpeta
    }

    @Override
    public int getTama침o() {
        // Calcula el tama침o total sumando recursivamente el tama침o de todos los hijos
        int tama침oTotal = 0;
        for (ArchivoComponent componente : hijos) {
            tama침oTotal += componente.getTama침o();      // Llamada recursiva
        }
        return tama침oTotal;
    }

    // A침ade un nuevo archivo o carpeta a la lista de hijos
    public void a침adir(ArchivoComponent componente) {
        hijos.add(componente);
    }

    // Elimina un archivo o carpeta de la lista de hijos
    public void eliminar(ArchivoComponent componente) {
        hijos.remove(componente);
    }

    @Override
    public void mostrar(String indentacion) {
        // Muestra la carpeta con su nombre y tama침o total
        System.out.println(indentacion + "游늬 Carpeta: " + nombre + " (" + getTama침o() + " bytes)");
        // Recorre todos los hijos y los muestra con m치s indentaci칩n (jerarqu칤a visual)
        for (ArchivoComponent componente : hijos) {
            componente.mostrar(indentacion + "    ");
        }
    }
}

/**
 * Cliente: Utiliza la estructura de archivos
 */
public class ArchivadorComposite {
    public static void main(String[] args) {
        // Crear carpeta ra칤z
        Carpeta raiz = new Carpeta("Ra칤z");

        // Crear subcarpetas
        Carpeta documentos = new Carpeta("Documentos");
        Carpeta imagenes = new Carpeta("Im치genes");
        Carpeta proyectos = new Carpeta("Proyectos"); // Nueva subcarpeta dentro de Documentos

        // Crear archivos individuales
        Archivo archivo1 = new Archivo("documento.txt", 100);
        Archivo archivo2 = new Archivo("foto.jpg", 2000);
        Archivo archivo3 = new Archivo("config.xml", 300);
        Archivo archivo4 = new Archivo("proyecto1.docx", 500);
        Archivo archivo5 = new Archivo("proyecto2.pptx", 800);

        // A침adir archivos a carpetas correspondientes
        documentos.a침adir(archivo1);     // documento.txt dentro de Documentos
        documentos.a침adir(archivo3);     // config.xml dentro de Documentos

        // A침adir archivos a la subcarpeta Proyectos
        proyectos.a침adir(archivo4);      // proyecto1.docx dentro de Proyectos
        proyectos.a침adir(archivo5);      // proyecto2.pptx dentro de Proyectos

        // A침adir la subcarpeta Proyectos a Documentos
        documentos.a침adir(proyectos);   // Proyectos dentro de Documentos

        imagenes.a침adir(archivo2);       // foto.jpg dentro de Im치genes

        // A침adir carpetas a la ra칤z
        raiz.a침adir(documentos);
        raiz.a침adir(imagenes);

        // Mostrar estructura completa del archivador
        System.out.println("游늭 Estructura del Archivador:");
        raiz.mostrar("");                // Muestra toda la jerarqu칤a desde la ra칤z

        // Mostrar tama침o total de la ra칤z
        System.out.println("\n游닍 Tama침o total: " + raiz.getTama침o() + " bytes");
    }
}